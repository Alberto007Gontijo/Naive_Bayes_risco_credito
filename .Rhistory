base = read.csv('credit_data.csv')
base <- read.csv('credit_data.csv')
base <- read.csv('credit_data.csv')
base <- read.csv('credit_data.csv')
base <- read.csv('credit_data.csv')
base <- read.csv('credit_data.csv')
base = read.csv('credit_data.csv')
setwd("F:/MachineLearning&Datascince/naiveBayes")
base = read.csv('credit_data.csv')
base$clientid = NULL
base$age = ifelse(base$age < 0, 40.92, base$age)
View(base)
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
base[, 1:3] = scale(base[, 1:3])
library(caTools)
set.seed(1)
divisao = sample.split(base$income, SplitRatio = 0.75)
base_treinamento = subset(base, divisao == TRUE)
View(base_treinamento)
base_teste = subset(base, divisao == FALSE)
divisao
library(e1071)
classificador = naiveBayes(x = base_treinamento[-4], y = base_treinamento$default)
classificador
base$default = factor(base$default, levels = c(0,1))
set.seed(1)
divisao = sample.split(base$income, SplitRatio = 0.75)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
classificador = naiveBayes(x = base_treinamento[-4], y = base_treinamento$default)
previsoes = predict(classificador, newdata = base_teste[-4])
previsoes
matriz_confusao = table(base_teste[ , 4], previsoes)
matriz_confusao
install.packages('caret')
library(caret)
confusionMatrix(matriz_confusao)
#Leitura da base de dados
base = read.csv('credit_data.csv')
#Apaga a coluna clientid
base$clientid = NULL
library(caTools)
set.seed(1)
divisao = sample.split(base$income, SplitRatio = 0.75)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
library(e1071)
classificador = naiveBayes(x = base_treinamento[-4], y = base_treinamento$default)
previsoes = predict(classificador, newdata = base_teste[-4])
matriz_confusao = table(base_teste[ , 4], previsoes)
install.packages('caret')
library(caret)
confusionMatrix(matriz_confusao)
install.packages("caret")
classificador = naiveBayes(x = base_treinamento[-4], y = base_treinamento$default)
previsoes = predict(classificador, newdata = base_teste[-4])
matriz_confusao = table(base_teste[ , 4], previsoes)
#install.packages('caret')
#library(caret)
confusionMatrix(matriz_confusao)
confusionMatrix(matriz_confusao)
confusionMatrix(matriz_confusao)
#Leitura da base de dados
base = read.csv('credit_data.csv')
#Apaga a coluna clientid
base$clientid = NULL
setwd("F:/MachineLearning&Datascince/naiveBayes")
#Leitura da base de dados
base = read.csv('credit_data.csv')
#Apaga a coluna clientid
base$clientid = NULL
library(caTools)
set.seed(1)
divisao = sample.split(base$income, SplitRatio = 0.75)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
#naiveBayes
library(e1071)
classificador = naiveBayes(x = base_treinamento[-4], y = base_treinamento$default)
previsoes = predict(classificador, newdata = base_teste[-4])
matriz_confusao = table(base_teste[ , 4], previsoes)
#install.packages('caret')
#library(caret)
confusionMatrix(matriz_confusao)
confusionMatrix(matriz_confusao)
library(caret)
matriz_confusao = table(base_teste[ , 4], previsoes)
#install.packages('caret')
#library(caret)
confusionMatrix(matriz_confusao)
base$age = ifelse(base$age < 0, 40.92, base$age)
# valores faltantes N/A
base$age = ifelse(is.na(base$age), mean(base$age, na.rm = TRUE), base$age)
library(caTools)
set.seed(1)
divisao = sample.split(base$income, SplitRatio = 0.75)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
#naiveBayes
library(e1071)
classificador = naiveBayes(x = base_treinamento[-4], y = base_treinamento$default)
previsoes = predict(classificador, newdata = base_teste[-4])
matriz_confusao = table(base_teste[ , 4], previsoes)
#install.packages('caret')
#library(caret)
confusionMatrix(matriz_confusao)
base = read.csv('census.csv')
base$X = NULL
setwd("F:/MachineLearning&Datascince/repositorioUCIcenso")
base = read.csv('census.csv')
base$X = NULL
#tratamento de campos categoricos
base$workclass = factor(base$workclass, levels = c(' Federal-gov', ' Local-gov', ' Private', ' Self-emp-inc', ' Self-emp-not-inc', ' State-gov', ' Without-pay'), labels = c(1, 2, 3, 4, 5, 6, 7))
base$education = factor(base$education, levels = c(' 10th', ' 11th', ' 12th', ' 1st-4th', ' 5th-6th', ' 7th-8th', ' 9th', ' Assoc-acdm', ' Assoc-voc', ' Bachelors', ' Doctorate', ' HS-grad', ' Masters', ' Preschool', ' Prof-school', ' Some-college'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
base$marital.status = factor(base$marital.status, levels = c(' Divorced', ' Married-AF-spouse', ' Married-civ-spouse', ' Married-spouse-absent', ' Never-married', ' Separated', ' Widowed'), labels = c(1, 2, 3, 4, 5, 6, 7))
base$occupation = factor(base$occupation, levels = c(' Adm-clerical', ' Armed-Forces', ' Craft-repair', ' Exec-managerial', ' Farming-fishing', ' Handlers-cleaners', ' Machine-op-inspct', ' Other-service', ' Priv-house-serv', ' Prof-specialty', ' Protective-serv', ' Sales', ' Tech-support', ' Transport-moving'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
base$relationship = factor(base$relationship, levels = c(' Husband', ' Not-in-family', ' Other-relative', ' Own-child', ' Unmarried', ' Wife'), labels = c(1, 2, 3, 4, 5, 6))
base$race = factor(base$race, levels = c(' Amer-Indian-Eskimo', ' Asian-Pac-Islander', ' Black', ' Other', ' White'), labels = c(1, 2, 3, 4, 5))
base$native.country = factor(base$native.country, levels = c(' Cambodia', ' Canada', ' China', ' Columbia', ' Cuba', ' Dominican-Republic', ' Ecuador', ' El-Salvador', ' England', ' France', ' Germany', ' Greece', ' Guatemala', ' Haiti', ' Holand-Netherlands', ' Honduras', ' Hong', ' Hungary', ' India', ' Iran', ' Ireland', ' Italy', ' Jamaica', ' Japan', ' Laos', ' Mexico', ' Nicaragua', ' Outlying-US(Guam-USVI-etc)', ' Peru', ' Philippines', ' Poland', ' Portugal', ' Puerto-Rico', ' Scotland', ' South', ' Taiwan', ' Thailand', ' Trinadad&Tobago', ' United-States', ' Vietnam', ' Yugoslavia'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41))
base$income = factor(base$income, levels = c(' <=50K', ' >50K'), labels = c(0, 1))
base[, 1] = scale(base[, 1])
base[, 3] = scale(base[, 3])
base[, 5] = scale(base[, 5])
base[, 11:13] = scale(base[, 11:13])
library(caTools)
set.seed(1)
divisao = sample.split(base$income, SplitRatio = 0.85)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
library(e1071)
classificador = naiveBayes(x = base_treinamento[-15], y = base_treinamento$income)
print(classificador)
previsoes = predict(classificador, newdata = base_teste[-15])
setwd("F:/MachineLearning&Datascince/repositorioUCIcenso")
previsoes = predict(classificador, newdata = base_teste[-15])
matriz_confusao = table(base_teste[,15], previsoes)
print(matriz_confusao)
library(caret)
library(caret)
confusionMatrix(matriz_confusao)
base = read.csv('census.csv')
base$X = NULL
base$workclass = factor(base$workclass, levels = c(' Federal-gov', ' Local-gov', ' Private', ' Self-emp-inc', ' Self-emp-not-inc', ' State-gov', ' Without-pay'), labels = c(1, 2, 3, 4, 5, 6, 7))
base$education = factor(base$education, levels = c(' 10th', ' 11th', ' 12th', ' 1st-4th', ' 5th-6th', ' 7th-8th', ' 9th', ' Assoc-acdm', ' Assoc-voc', ' Bachelors', ' Doctorate', ' HS-grad', ' Masters', ' Preschool', ' Prof-school', ' Some-college'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
base$marital.status = factor(base$marital.status, levels = c(' Divorced', ' Married-AF-spouse', ' Married-civ-spouse', ' Married-spouse-absent', ' Never-married', ' Separated', ' Widowed'), labels = c(1, 2, 3, 4, 5, 6, 7))
base$occupation = factor(base$occupation, levels = c(' Adm-clerical', ' Armed-Forces', ' Craft-repair', ' Exec-managerial', ' Farming-fishing', ' Handlers-cleaners', ' Machine-op-inspct', ' Other-service', ' Priv-house-serv', ' Prof-specialty', ' Protective-serv', ' Sales', ' Tech-support', ' Transport-moving'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
base$relationship = factor(base$relationship, levels = c(' Husband', ' Not-in-family', ' Other-relative', ' Own-child', ' Unmarried', ' Wife'), labels = c(1, 2, 3, 4, 5, 6))
base$race = factor(base$race, levels = c(' Amer-Indian-Eskimo', ' Asian-Pac-Islander', ' Black', ' Other', ' White'), labels = c(1, 2, 3, 4, 5))
base$native.country = factor(base$native.country, levels = c(' Cambodia', ' Canada', ' China', ' Columbia', ' Cuba', ' Dominican-Republic', ' Ecuador', ' El-Salvador', ' England', ' France', ' Germany', ' Greece', ' Guatemala', ' Haiti', ' Holand-Netherlands', ' Honduras', ' Hong', ' Hungary', ' India', ' Iran', ' Ireland', ' Italy', ' Jamaica', ' Japan', ' Laos', ' Mexico', ' Nicaragua', ' Outlying-US(Guam-USVI-etc)', ' Peru', ' Philippines', ' Poland', ' Portugal', ' Puerto-Rico', ' Scotland', ' South', ' Taiwan', ' Thailand', ' Trinadad&Tobago', ' United-States', ' Vietnam', ' Yugoslavia'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41))
base$income = factor(base$income, levels = c(' <=50K', ' >50K'), labels = c(0, 1))
set.seed(1)
divisao = sample.split(base$income, SplitRatio = 0.85)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
#Incluindo o Naive Bayes
library(e1071)
classificador = naiveBayes(x = base_treinamento[-15], y = base_treinamento$income)
print(classificador)
previsoes = predict(classificador, newdata = base_teste[-15])
matriz_confusao = table(base_teste[,15], previsoes)
print(matriz_confusao)
library(caret)
confusionMatrix(matriz_confusao)
base = read.csv('census.csv')
base$X = NULL
base$income = factor(base$income, levels = c(' <=50K', ' >50K'), labels = c(0, 1))
base[, 1] = scale(base[, 1])
base[, 3] = scale(base[, 3])
base[, 5] = scale(base[, 5])
base[, 11:13] = scale(base[, 11:13])
ibrary(caTools)
set.seed(1)
divisao = sample.split(base$income, SplitRatio = 0.85)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
#Incluindo o Naive Bayes
library(e1071)
classificador = naiveBayes(x = base_treinamento[-15], y = base_treinamento$income)
print(classificador)
previsoes = predict(classificador, newdata = base_teste[-15])
matriz_confusao = table(base_teste[,15], previsoes)
print(matriz_confusao)
library(caret)
confusionMatrix(matriz_confusao)
library(caTools)
set.seed(1)
divisao = sample.split(base$income, SplitRatio = 0.85)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
#Incluindo o Naive Bayes
library(e1071)
classificador = naiveBayes(x = base_treinamento[-15], y = base_treinamento$income)
print(classificador)
previsoes = predict(classificador, newdata = base_teste[-15])
matriz_confusao = table(base_teste[,15], previsoes)
print(matriz_confusao)
library(caret)
confusionMatrix(matriz_confusao)
base = read.csv('census.csv')
base$X = NULL
base$income = factor(base$income, levels = c(' <=50K', ' >50K'), labels = c(0, 1))
library(caTools)
set.seed(1)
divisao = sample.split(base$income, SplitRatio = 0.85)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
#Incluindo o Naive Bayes
library(e1071)
classificador = naiveBayes(x = base_treinamento[-15], y = base_treinamento$income)
print(classificador)
previsoes = predict(classificador, newdata = base_teste[-15])
matriz_confusao = table(base_teste[,15], previsoes)
print(matriz_confusao)
library(caret)
confusionMatrix(matriz_confusao)
base = read.csv('risco_credito.csv')
View(base)
install.packages('rpart')
library(rpart)
classificador = rpart(formula = risco ~ ., data = base)
classificador
plot(classificador)
classificador = rpart(formula = risco ~ ., data = base, control = rpart.control(minbucket = 1 ))
plot(classificador)
text(classificador)
install.packages('rpart.plot')
library(rpart.plot)
classificador = rpart(formula = risco ~ ., data = base, control = rpart.control(minbucket = 1 ))
plot(classificador)
text(classificador)
print(classificador)
library(rpart.plot)
library(rpart)
rpart.plot(classificador)
historia = c('ruim')
divida = c('alta')
garantias = c('adequada')
renda = ('0_15')
df = data.frame(historia, divida, garantias, renda)
historia = c('Boa', 'ruim')
divida = c('alta', 'alta')
garantias = c('nenhuma', 'adequada')
renda = ("acima de 35", '0_15')
df = data.frame(historia, divida, garantias, renda)
historia = c('Boa', 'ruim')
divida = c('alta', 'alta')
garantias = c('nenhuma', 'adequada')
renda = ('acima_35', '0_15')
df = data.frame(historia, divida, garantias, renda)
previsoes = predict(classificador, newdata = df)
print(previsoes)
historia = c('Boa', 'ruim')
divida = c('alta', 'alta')
garantias = c('nenhuma', 'adequada')
renda = c('acima_35', '0_15')
df = data.frame(historia, divida, garantias, renda)
previsoes = predict(classificador, newdata = df)
print(previsoes)
previsoes = predict(classificador, newdata - df)
print(previsoes)
historia = c('boa', 'ruim')
divida = c('alta', 'alta')
garantias = c('nenhuma', 'adequada')
renda = c('acima_35', '0_15')
df = data.frame(historia, divida, garantias, renda)
previsoes = predict(classificador, newdata - df)
print(previsoes)
previsoes = predict(classificador, newdata - df)
base = read.csv('risco_credito.csv')
classificador = rpart(formula = risco ~ ., data = base, control = rpart.control(minbucket = 1 ))
plot(classificador)
text(classificador)
print(classificador)
rpart.plot(classificador)
historia = c('boa', 'ruim')
divida = c('alta', 'alta')
garantias = c('nenhuma', 'adequada')
renda = c('acima_35', '0_15')
df = data.frame(historia, divida, garantias, renda)
previsoes = predict(classificador, newdata = df)
print(previsoes)
cls
base = read.csv('credit_data.csv')
base = read.csv('credit_data.csv')
setwd("F:/MachineLearning&Datascince/clientbanco")
base = read.csv('credit_data.csv')
base$clientid = NULL
View(base)
base$age = ifelse(base$age < 0, 40.92, base$age)
base$age = ifelse(is.na (base$age), mean(base$age, na.rm = TRUE), base$age)
base[, 1:3] = scale(base[, 1:3])
library(caTools)
set.seed(1)
divisao = sample.split(base$income, SplitRatio = 0.75)
base_treinamento = subset(base, divisao = TRUE)
base_teste = subset(base, divisao = FALSE)
library(rpart)
classificador = rpart(formula = defalt ~., data = base_treinamento)
classificador = rpart(formula = default ~., data = base_treinamento)
print(classificador)
print(classificador)
classificador = rpart(formula = defalt ~., data = base_treinamento)
classificador = rpart(formula = default ~., data = base_treinamento)
print(classificador)
classificador = rpart(formula = default ~ ., data = base_treinamento)
print(classificador)
set.seed(1)
divisao = sample.split(base$income, SplitRatio = 0.75)
base_treinamento = subset(base, divisao = TRUE)
base_teste = subset(base, divisao = FALSE)
set.seed(1)
divisao = sample.split(base$income, SplitRatio = 0.75)
base_treinamento = subset(base, divisao = TRUE)
base_teste = subset(base, divisao = FALSE)
base = read.csv('credit_data.csv')
base$clientid = NULL
base$age = ifelse(base$age < 0, 40.92, base$age)
base$age = ifelse(is.na (base$age), mean(base$age, na.rm = TRUE), base$age)
base[, 1:3] = scale(base[, 1:3])
base = read.csv('credit_data.csv')
base$clientid = NULL
base$age = ifelse(base$age < 0, 40.92, base$age)
base$age = ifelse(is.na (base$age), mean(base$age, na.rm = TRUE), base$age)
base[, 1:3] = scale(base[, 1:3])
set.seed(1)
divisao = sample.split(base$income, SplitRatio = 0.75)
base_treinamento = subset(base, divisao = TRUE)
print(divisao)
base_treinamento = subset(base, divisao = TRUE)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
classificador = rpart(formula = default ~ ., data = base_treinamento)
print(classificador)
library(rpart.plot)
rpart.plot(classificador)
previsoes = predict(classificador, newdata = base_teste[-4])
print(previsoes)
base = read.csv('credit_data.csv')
base$clientid = NULL
base$age = ifelse(base$age < 0, 40.92, base$age)
base$age = ifelse(is.na (base$age), mean(base$age, na.rm = TRUE), base$age)
base[, 1:3] = scale(base[, 1:3])
#encode da classe
base$default = factor(base$default, levels = c(0,1))
set.seed(1)
divisao = sample.split(base$income, SplitRatio = 0.75)
print(divisao)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
classificador = rpart(formula = default ~ ., data = base_treinamento)
print(classificador)
rpart.plot(classificador)
previsoes = predict(classificador, newdata = base_teste[-4])
print(previsoes)
View(previsoes)
previsoes = predict(classificador, newdata = base_teste[-4], type = 'class')
print(previsoes)
matriz_confusao = table(base_teste[,4], previsoes)
print(previsoes)
library(caret)
confusionMatrix(matriz_confusao)
setwd("F:/MachineLearning&Datascince/repositorioUCIcenso")
base = read.csv('census.csv')
base$X = NULL
table(base$sex)
unique(base$sex)
base$sex = factor(base$sex, levels = c(' Female', ' Male'), labels = c(0, 1))
base[is.na(base$sex)]
base$workclass = factor(base$workclass, levels = c(' Federal-gov', ' Local-gov', ' Private', ' Self-emp-inc', ' Self-emp-not-inc', ' State-gov', ' Without-pay'), labels = c(1, 2, 3, 4, 5, 6, 7))
base$education = factor(base$education, levels = c(' 10th', ' 11th', ' 12th', ' 1st-4th', ' 5th-6th', ' 7th-8th', ' 9th', ' Assoc-acdm', ' Assoc-voc', ' Bachelors', ' Doctorate', ' HS-grad', ' Masters', ' Preschool', ' Prof-school', ' Some-college'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
base$marital.status = factor(base$marital.status, levels = c(' Divorced', ' Married-AF-spouse', ' Married-civ-spouse', ' Married-spouse-absent', ' Never-married', ' Separated', ' Widowed'), labels = c(1, 2, 3, 4, 5, 6, 7))
base$occupation = factor(base$occupation, levels = c(' Adm-clerical', ' Armed-Forces', ' Craft-repair', ' Exec-managerial', ' Farming-fishing', ' Handlers-cleaners', ' Machine-op-inspct', ' Other-service', ' Priv-house-serv', ' Prof-specialty', ' Protective-serv', ' Sales', ' Tech-support', ' Transport-moving'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
base$relationship = factor(base$relationship, levels = c(' Husband', ' Not-in-family', ' Other-relative', ' Own-child', ' Unmarried', ' Wife'), labels = c(1, 2, 3, 4, 5, 6))
base$race = factor(base$race, levels = c(' Amer-Indian-Eskimo', ' Asian-Pac-Islander', ' Black', ' Other', ' White'), labels = c(1, 2, 3, 4, 5))
base$native.country = factor(base$native.country, levels = c(' Cambodia', ' Canada', ' China', ' Columbia', ' Cuba', ' Dominican-Republic', ' Ecuador', ' El-Salvador', ' England', ' France', ' Germany', ' Greece', ' Guatemala', ' Haiti', ' Holand-Netherlands', ' Honduras', ' Hong', ' Hungary', ' India', ' Iran', ' Ireland', ' Italy', ' Jamaica', ' Japan', ' Laos', ' Mexico', ' Nicaragua', ' Outlying-US(Guam-USVI-etc)', ' Peru', ' Philippines', ' Poland', ' Portugal', ' Puerto-Rico', ' Scotland', ' South', ' Taiwan', ' Thailand', ' Trinadad&Tobago', ' United-States', ' Vietnam', ' Yugoslavia'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41))
base$income = factor(base$income, levels = c(' <=50K', ' >50K'), labels = c(0, 1))
base[is.na(base$income)]
base[, 1] = scale(base[, 1])
base[, 3] = scale(base[, 3])
base[, 5] = scale(base[, 5])
base[, 11:13] = scale(base[, 11:13])
library(caTools)
set.seed(1)
divisao = sample.split(base$income, SplitRatio = 0.85)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
library(rpart)
classificador = rpart(formula = income ~. , data = base_treinamento)
rpart.plot(classificador)
library(raprt.plot)
library(rpart.plot)
rpart.plot(classificador)
previsoes = predict(classificador, newdata = base_teste[-15], type = 'class')
previsoes
View(base)
View(base_teste)
matriz_confusao = table(base_teste[,15], previsoes)
print(matriz_confusao)
library(caret)
confusionMatrix(matriz_confusao)
base = read.csv('census.csv')
setwd("F:/MachineLearning&Datascince/risco_credito")
base = read.csv('census.csv')
setwd("F:/MachineLearning&Datascince/repositorioUCIcenso")
base = read.csv('census.csv')
View(base)
base$X = NULL
base$income = factor(base$income, levels = c(' <=50K', ' >50K'), labels = c(0, 1))
set.seed(1)
divisao = sample.split(base$income, SplitRatio = 0.85)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
library(rpart)
classificador = rpart(formula = income ~. , data = base_treinamento)
library(rpart.plot)
rpart.plot(classificador)
previsoes = predict(classificador, newdata = base_teste[-15], type = 'class')
previsoes
matriz_confusao = table(base_teste[,15], previsoes)
print(matriz_confusao)
library(caret)
confusionMatrix(matriz_confusao)
base = read.csv('census.csv')
#Apagar a coluna X
base$X = NULL
table(base$sex)
unique(base$sex)
base$sex = factor(base$sex, levels = c(' Female', ' Male'), labels = c(0, 1))
base[is.na(base$sex)]
#tratamento dos campos categóricos
base$workclass = factor(base$workclass, levels = c(' Federal-gov', ' Local-gov', ' Private', ' Self-emp-inc', ' Self-emp-not-inc', ' State-gov', ' Without-pay'), labels = c(1, 2, 3, 4, 5, 6, 7))
base$education = factor(base$education, levels = c(' 10th', ' 11th', ' 12th', ' 1st-4th', ' 5th-6th', ' 7th-8th', ' 9th', ' Assoc-acdm', ' Assoc-voc', ' Bachelors', ' Doctorate', ' HS-grad', ' Masters', ' Preschool', ' Prof-school', ' Some-college'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16))
base$marital.status = factor(base$marital.status, levels = c(' Divorced', ' Married-AF-spouse', ' Married-civ-spouse', ' Married-spouse-absent', ' Never-married', ' Separated', ' Widowed'), labels = c(1, 2, 3, 4, 5, 6, 7))
base$occupation = factor(base$occupation, levels = c(' Adm-clerical', ' Armed-Forces', ' Craft-repair', ' Exec-managerial', ' Farming-fishing', ' Handlers-cleaners', ' Machine-op-inspct', ' Other-service', ' Priv-house-serv', ' Prof-specialty', ' Protective-serv', ' Sales', ' Tech-support', ' Transport-moving'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14))
base$relationship = factor(base$relationship, levels = c(' Husband', ' Not-in-family', ' Other-relative', ' Own-child', ' Unmarried', ' Wife'), labels = c(1, 2, 3, 4, 5, 6))
base$race = factor(base$race, levels = c(' Amer-Indian-Eskimo', ' Asian-Pac-Islander', ' Black', ' Other', ' White'), labels = c(1, 2, 3, 4, 5))
base$native.country = factor(base$native.country, levels = c(' Cambodia', ' Canada', ' China', ' Columbia', ' Cuba', ' Dominican-Republic', ' Ecuador', ' El-Salvador', ' England', ' France', ' Germany', ' Greece', ' Guatemala', ' Haiti', ' Holand-Netherlands', ' Honduras', ' Hong', ' Hungary', ' India', ' Iran', ' Ireland', ' Italy', ' Jamaica', ' Japan', ' Laos', ' Mexico', ' Nicaragua', ' Outlying-US(Guam-USVI-etc)', ' Peru', ' Philippines', ' Poland', ' Portugal', ' Puerto-Rico', ' Scotland', ' South', ' Taiwan', ' Thailand', ' Trinadad&Tobago', ' United-States', ' Vietnam', ' Yugoslavia'), labels = c(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41))
base$income = factor(base$income, levels = c(' <=50K', ' >50K'), labels = c(0, 1))
base[is.na(base$income)]
#Escalonamento
base[, 1] = scale(base[, 1])
base[, 3] = scale(base[, 3])
base[, 5] = scale(base[, 5])
base[, 11:13] = scale(base[, 11:13])
#Divisão entre treinamento e teste
library(caTools)
set.seed(1)
divisao = sample.split(base$income, SplitRatio = 0.85)
base_treinamento = subset(base, divisao == TRUE)
base_teste = subset(base, divisao == FALSE)
poda = classificador$cptable[which.min(classificador$cptable[, 'xerror']), "CP"]
classificador = rpart(formula = income ~. , data = base_treinamento)
rpart.plot(classificador)
poda = classificador$cptable[which.min(classificador$cptable[, 'xerror']), "CP"]
print(classificador$cptable)
prune(classificador, 0.05)
rpart.plot(classificador)
